Index: server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unh.cs.cs619.bulletzone.repository;\r\n\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\nimport java.util.Timer;\r\nimport java.util.concurrent.atomic.AtomicLong;\r\n\r\nimport edu.unh.cs.cs619.bulletzone.datalayer.terrain.TerrainType;\r\nimport edu.unh.cs.cs619.bulletzone.model.BattleMap;\r\nimport edu.unh.cs.cs619.bulletzone.model.BattleMapRepository;\r\nimport edu.unh.cs.cs619.bulletzone.model.entities.BulletType;\r\nimport edu.unh.cs.cs619.bulletzone.model.entities.Miner;\r\nimport edu.unh.cs.cs619.bulletzone.model.entities.VehicleEntity;\r\nimport edu.unh.cs.cs619.bulletzone.model.Direction;\r\nimport edu.unh.cs.cs619.bulletzone.model.FieldHolder;\r\nimport edu.unh.cs.cs619.bulletzone.model.Game;\r\nimport edu.unh.cs.cs619.bulletzone.model.IllegalTransitionException;\r\nimport edu.unh.cs.cs619.bulletzone.model.LimitExceededException;\r\nimport edu.unh.cs.cs619.bulletzone.model.entities.Tank;\r\nimport edu.unh.cs.cs619.bulletzone.model.TankDoesNotExistException;\r\n\r\nimport static com.google.common.base.Preconditions.checkNotNull;\r\n\r\n@Component\r\npublic class InMemoryGameRepository implements GameRepository {\r\n\r\n    /**\r\n     * Field dimensions\r\n     */\r\n    private static final int FIELD_DIM = 16;\r\n\r\n    /**\r\n     * Bullet step time in milliseconds\r\n     */\r\n    private static final int BULLET_PERIOD = 200;\r\n\r\n    /**\r\n     * Bullet's impact effect [life]\r\n     */\r\n    private static final int BULLET_DAMAGE = 1;\r\n\r\n    /**\r\n     * Tank's default life [life]\r\n     */\r\n    private static final int TANK_LIFE = 100;\r\n    private static final int MINER_LIFE = 300;\r\n    private final Timer timer = new Timer();\r\n    private final AtomicLong idGenerator = new AtomicLong();\r\n    private final Object monitor = new Object();\r\n    private Game game = null;\r\n    private BattleMap currentBattleMap = BattleMapRepository.DEFAULT_MAP; // BattleMap for the current game\r\n\r\n    private ItemSpawner interactableItemHandler;\r\n\r\n    private GameStatus gameStatus = GameStatus.STOPPED; // Only getter, no setter | only this class can change the status\r\n\r\n    public GameStatus getGameStatus() {\r\n        return gameStatus;\r\n    }\r\n\r\n    /**\r\n     * Gets a random unused location on the grid\r\n     *\r\n     * @return a random unused location on the grid\r\n     * @throws RuntimeException if there are no possible locations\r\n     */\r\n    public FieldHolder getRandomEmptyFieldHolder() throws RuntimeException {\r\n        Random random = new Random();\r\n\r\n        ArrayList<FieldHolder> possibleLocations = new ArrayList<>();\r\n\r\n        // check every field on the grid to see if its full or not\r\n        for (int i = 0; i < FIELD_DIM * FIELD_DIM; i++) {\r\n            FieldHolder fieldElement = game.getHolderGrid().get(i);\r\n            if (!fieldElement.isPresent()) {// add the location to the list of possible locations\r\n                possibleLocations.add(fieldElement);\r\n            }\r\n        }\r\n\r\n        if (possibleLocations.size() == 0) {\r\n            throw new RuntimeException(\"No possible locations\");\r\n        }\r\n\r\n        // pick a random location from the list of possible locations\r\n        int randomIndex = random.nextInt(possibleLocations.size());\r\n\r\n        return possibleLocations.get(randomIndex);\r\n    }\r\n\r\n    @Override\r\n    public VehicleEntity join(String ip) {\r\n        synchronized (this.monitor) {\r\n            VehicleEntity tank;\r\n//            VehicleEntity miner;\r\n            if (game == null) {\r\n                this.create();\r\n            }\r\n\r\n            if ((tank = game.getVehicle(ip)) != null)  // already joined\r\n                return tank;\r\n\r\n            Long tankId = this.idGenerator.getAndIncrement();\r\n\r\n            tank = new Tank(tankId, Direction.Up, ip);\r\n            tank.setHealth(TANK_LIFE);\r\n            tank.setGame(game);\r\n\r\n            // TODO: uncomment when account linkable fix is merged\r\n//            miner = new Miner(minerId, Direction.Up, ip);\r\n//            miner.setHealth(MINER_LIFE);\r\n//            miner.setGame(game);\r\n\r\n            // This may run for forever.. If there is no free space. XXX\r\n            for (; ; ) {\r\n                try {\r\n                    FieldHolder tankHolder = getRandomEmptyFieldHolder();\r\n                    tankHolder.setFieldEntity(tank);\r\n                    tank.setParent(tankHolder);\r\n\r\n                    // TODO: uncomment when account linkable fix is merged\r\n//                    FieldHolder minerHolder = getRandomEmptyFieldHolder();\r\n//                    minerHolder.setFieldEntity(miner);\r\n//                    miner.setParent(minerHolder);\r\n                    break;\r\n                } catch (RuntimeException e) {\r\n                    //Log.i(TAG, \"No possible locations\");\r\n                }\r\n            }\r\n\r\n            game.addVehicle(ip, tank);\r\n//            game.addVehicle(ip, miner);\r\n\r\n            if (gameStatus == GameStatus.STOPPED) {\r\n                onStart();\r\n            }\r\n\r\n            return tank;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int[][] getGrid() {\r\n        synchronized (this.monitor) {\r\n            if (game == null) {\r\n                this.create();\r\n            }\r\n        }\r\n        return game.getGrid2D();\r\n    }\r\n\r\n    public void setCurrentBattleMap(BattleMap battleMap) {\r\n        this.currentBattleMap = battleMap;\r\n    }\r\n\r\n    public BattleMap getCurrentBattleMap() {\r\n        return this.currentBattleMap;\r\n    }\r\n\r\n    @Override\r\n    public boolean turn(long controllableID, Direction direction)\r\n            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {\r\n        synchronized (this.monitor) {\r\n            checkNotNull(direction);\r\n\r\n            // Find user\r\n            VehicleEntity contEnt = game.getVehicles().get(controllableID);\r\n            if (contEnt == null) {\r\n                //Log.i(TAG, \"Cannot find user with id: \" + tankId);\r\n                throw new TankDoesNotExistException(controllableID);\r\n            }\r\n\r\n            if (contEnt.turn(direction)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean move(long controllableID, Direction direction)\r\n            throws TankDoesNotExistException, IllegalTransitionException, LimitExceededException {\r\n        synchronized (this.monitor) {\r\n\r\n            // Find tank\r\n            VehicleEntity vehicle = game.getVehicles().get(controllableID);\r\n            if (vehicle == null) {\r\n                //Log.i(TAG, \"Cannot find user with id: \" + tankId);\r\n                //return false;\r\n                throw new TankDoesNotExistException(controllableID);\r\n            }\r\n\r\n            if (vehicle.move(direction)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean fire(long vehicleId, int intBulletType)\r\n            throws TankDoesNotExistException, LimitExceededException {\r\n        synchronized (this.monitor) {\r\n\r\n            // Find tank\r\n            VehicleEntity vehicle = game.getVehicles().get(vehicleId);\r\n            if (vehicle == null) {\r\n                //Log.i(TAG, \"Cannot find user with id: \" + tankId);\r\n                //return false;\r\n                throw new TankDoesNotExistException(vehicleId);\r\n            }\r\n\r\n            // get the bullet type (int bulletType - 1)\r\n            BulletType bulletType = BulletType.values()[intBulletType - 1];\r\n\r\n            return vehicle.fire(bulletType);\r\n        }\r\n    }\r\n\r\n    public boolean mine(long minerId, long resourceId)\r\n            throws TankDoesNotExistException, InterruptedException {\r\n        VehicleEntity vehicle = game.getVehicles().get(minerId);\r\n        if (vehicle == null)\r\n            throw new TankDoesNotExistException(minerId);\r\n\r\n        if (vehicle instanceof Miner) {\r\n            Miner miner = (Miner) vehicle;\r\n            if (miner.mine(resourceId))\r\n                return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void leave(long vehicleId)\r\n            throws TankDoesNotExistException {\r\n        synchronized (this.monitor) {\r\n            if (!this.game.getVehicles().containsKey(vehicleId)) {\r\n                throw new TankDoesNotExistException(vehicleId);\r\n            }\r\n\r\n            System.out.println(\"leave() called, tank ID: \" + vehicleId);\r\n\r\n            VehicleEntity vehicle = game.getVehicles().get(vehicleId);\r\n            FieldHolder parent = vehicle.getParent();\r\n            parent.clearField();\r\n            game.removeVehicle(vehicleId);\r\n\r\n            // TODO: convert the user's resources to points\r\n//            if (tankId >= 0) {\r\n//                game.getUsers().\r\n            // somethin somethin, add points to user\r\n//            }\r\n\r\n            // if last tank leaves, stop the game\r\n            if (game.getVehicles().isEmpty()) {\r\n                onStop();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new game board. If the game board is already created, this\r\n     * method does nothing.\r\n     *\r\n     * @throws IllegalStateException if the battle map is not set\r\n     */\r\n    public void create() throws IllegalStateException {\r\n        if (game != null) {\r\n            return;\r\n        }\r\n\r\n        if (currentBattleMap == null) {\r\n            throw new IllegalStateException(\"Battle map is not set\");\r\n        }\r\n\r\n        synchronized (this.monitor) {\r\n            GameBoardBuilder builder = new GameBoardBuilder(FIELD_DIM);\r\n            this.game = builder.buildGameBoard(currentBattleMap);\r\n        }\r\n    }\r\n\r\n    public void onStart() {\r\n        gameStatus = GameStatus.RUNNING;\r\n        interactableItemHandler = new ItemSpawner(this);\r\n        interactableItemHandler.spawnInitialResources(3);\r\n        interactableItemHandler.spawnRandomResources(15); // Starts spawning resources on a different thread\r\n    }\r\n\r\n    public void onStop() {\r\n        gameStatus = GameStatus.STOPPED;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java
--- a/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java	(revision dccc97e540d75c147c785b517c0ae505d1a0c8b2)
+++ b/server/src/main/java/edu/unh/cs/cs619/bulletzone/repository/InMemoryGameRepository.java	(date 1682045175603)
@@ -93,7 +93,7 @@
     public VehicleEntity join(String ip) {
         synchronized (this.monitor) {
             VehicleEntity tank;
-//            VehicleEntity miner;
+            VehicleEntity miner;
             if (game == null) {
                 this.create();
             }
@@ -102,15 +102,15 @@
                 return tank;
 
             Long tankId = this.idGenerator.getAndIncrement();
+            Long minerId = this.idGenerator.getAndAdd(20000000);
 
             tank = new Tank(tankId, Direction.Up, ip);
             tank.setHealth(TANK_LIFE);
             tank.setGame(game);
 
-            // TODO: uncomment when account linkable fix is merged
-//            miner = new Miner(minerId, Direction.Up, ip);
-//            miner.setHealth(MINER_LIFE);
-//            miner.setGame(game);
+            miner = new Miner(minerId, Direction.Up, ip);
+            miner.setHealth(MINER_LIFE);
+            miner.setGame(game);
 
             // This may run for forever.. If there is no free space. XXX
             for (; ; ) {
@@ -119,10 +119,9 @@
                     tankHolder.setFieldEntity(tank);
                     tank.setParent(tankHolder);
 
-                    // TODO: uncomment when account linkable fix is merged
-//                    FieldHolder minerHolder = getRandomEmptyFieldHolder();
-//                    minerHolder.setFieldEntity(miner);
-//                    miner.setParent(minerHolder);
+                    FieldHolder minerHolder = getRandomEmptyFieldHolder();
+                    minerHolder.setFieldEntity(miner);
+                    miner.setParent(minerHolder);
                     break;
                 } catch (RuntimeException e) {
                     //Log.i(TAG, "No possible locations");
@@ -130,7 +129,7 @@
             }
 
             game.addVehicle(ip, tank);
-//            game.addVehicle(ip, miner);
+            game.addVehicle(ip, miner);
 
             if (gameStatus == GameStatus.STOPPED) {
                 onStart();
